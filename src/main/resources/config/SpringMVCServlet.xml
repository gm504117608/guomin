<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
	   default-autowire="byName">

	<context:annotation-config />
	<!-- 扫描web包 ，应用Spring的注解 -->
	<context:component-scan base-package="com.company.**.controller" />
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO(实体类get set方法)的映射；
	     同时处理responseBody返回去的json格式能正确的被前端接受，而不出现406 Not Acceptable错误； -->
	<!--<mvc:annotation-driven />-->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" />
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="false" />
		<property name="favorParameter" value="false" />
		<property name="ignoreAcceptHeader" value="false" />
		<property name="mediaTypes" >
			<value>
				atom=application/atom+xml
				html=text/html
				json=application/json
				*=*/*
			</value>
		</property>
	</bean>

	<!--  springmvc 拦截请求配置  -->
	<mvc:interceptors>
		<!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<!--<bean id="RequestInterceptor" class="com.company.common.filter.RequestInterceptor"/>-->

		<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean id="requestInterceptor" class="com.company.common.filter.RequestInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 试图解析  -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/page/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

	<!-- 过滤静态资源的请求不走controller（当拦截所有的请求的时候使用） -->
	<!--<mvc:resources mapping="/assets/**" location="/WEB-INF/page/assets/" />-->

</beans>



